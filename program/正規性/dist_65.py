import math as np


# テストデータの数
num_data = 6
# キーポイントの数
num_point = 8
f = open('data_up_result/result_dataup_no_65', 'r')
# f1.write("1\n")
datalist = f.readlines()
count = len(datalist)
list_param = []
param = []
for i in range(count):
    data = datalist[i]
    split_data = data.split()
    if len(split_data) == 1:
        param.append(split_data[0])
    if len(split_data) > 1:
        if split_data[0] != "score":
            param.append(split_data[2])
    if len(param) == 1 + 2 * num_point:
        list_param.append(param)
        param = []

print(list_param)
# # ここまでのcheck
# if len(list_param) == num_data:
#     print("OK")
# else:
#     print("FALSE")
f.close()
# 正解座標のdata
list_ans = [['flipped_test0', 24, 18, 25, 139, 36, 402, 18, 425, 26, 308, 32, 194, 34, 97, 26, 26], ['flipped_test0_5', 50, 16, 42, 135, 35, 404, 10, 422, 28, 306, 43, 190, 55, 96, 52, 23], ['flipped_test0_-5', 9, 22, 22, 143, 52, 406, 40, 427, 39, 311, 32, 198, 27, 99, 10, 27], ['flipped_test1', 83, 26, 61, 149, 24, 438, 41, 458, 73, 332, 98, 226, 104, 117, 87, 34], ['flipped_test1_5', 112, 24, 82, 148, 19, 425, 33, 450, 78, 326, 111, 231, 127, 117, 116, 31], ['flipped_test1_-5', 51, 25, 42, 155, 29, 441, 45, 459, 68, 337, 85, 233, 81, 115, 55, 33], ['flipped_test2', 29, 23, 46, 166, 81, 477, 122, 504, 78, 370, 42, 251, 21, 133, 24, 25], ['flipped_test2_5', 37, 21, 43, 165, 51, 479, 90, 507, 58, 372, 36, 248, 22, 123, 33, 24], ['flipped_test2_-5_cut', 30, 29, 60, 170, 123, 480, 168, 504, 112, 373, 68, 254, 35, 137, 29, 35], ['flipped_test3', 57, 18, 73, 169, 97, 510, 70, 524, 42, 381, 22, 261, 26, 126, 50, 26], ['flipped_test3_5', 76, 25, 79, 174, 72, 518, 46, 528, 29, 384, 22, 242, 33, 128, 70, 33], ['flipped_test3_-5', 40, 23, 68, 172, 122, 506, 95, 525, 56, 384, 25, 247, 16, 134, 33, 29], ['flipped_test4_-5', 58, 17, 58, 260, 56, 812, 26, 864, 75, 618, 106, 406, 109, 192, 68, 23], ['flipped_test4_5_cut', 197, 31, 152, 279, 56, 822, 21, 859, 108, 633, 171, 428, 215, 218, 202, 46], ['flipped_test4_cut', 129, 5, 103, 254, 53, 807, 25, 843, 91, 612, 137, 398, 161, 184, 135, 12], ['flipped_test5', 36, 32, 32, 198, 29, 538, 20, 562, 43, 401, 57, 263, 57, 137, 37, 39], ['flipped_test5_5', 69, 24, 53, 183, 20, 527, 11, 547, 46, 389, 71, 252, 83, 125, 76, 32], ['flipped_test5_-5', 13, 32, 23, 194, 50, 533, 43, 556, 50, 395, 50, 253, 46, 144, 14, 39], ['flipped_test6', 39, 16, 35, 138, 28, 381, 21, 402, 42, 299, 57, 200, 61, 103, 46, 24], ['flipped_test6_5', 72, 18, 58, 138, 30, 382, 19, 403, 51, 299, 74, 198, 87, 108, 76, 26], ['flipped_test6_-5', 19, 27, 25, 143, 41, 397, 34, 413, 44, 300, 51, 203, 49, 111, 25, 30], ['flipped_test7', 89, 13, 63, 164, 11, 514, 16, 536, 53, 400, 85, 271, 104, 141, 95, 24], ['flipped_test7_5', 125, 21, 88, 169, 8, 505, 11, 525, 59, 396, 96, 274, 132, 143, 133, 28], ['flipped_test7_-5', 55, 26, 44, 179, 24, 525, 30, 545, 56, 412, 75, 282, 85, 148, 64, 32], ['flipped_test8', 54, 16, 44, 128, 28, 377, 10, 398, 34, 282, 51, 184, 62, 88, 56, 23], ['flipped_test8_5', 84, 15, 65, 127, 27, 374, 9, 393, 42, 283, 69, 187, 88, 91, 87, 23], ['flipped_test8_-5', 27, 24, 28, 138, 32, 385, 17, 409, 32, 292, 41, 191, 43, 99, 29, 27], ['flipped_test9', 47, 26, 56, 187, 71, 538, 92, 577, 58, 412, 37, 270, 27, 137, 39, 31], ['flipped_test9_5', 75, 32, 73, 187, 55, 537, 72, 582, 55, 413, 45, 269, 50, 132, 67, 33], ['flipped_test9_-5', 36, 22, 62, 181, 106, 526, 131, 567, 84, 404, 50, 260, 28, 133, 31, 26], ['flipped_test10_5', 137, 19, 111, 183, 48, 508, 99, 552, 99, 395, 99, 239, 113, 115, 135, 29], ['flipped_test10_-5', 43, 16, 46, 180, 44, 518, 98, 545, 71, 392, 46, 244, 34, 114, 40, 20], ['flipped_test10_cut', 68, 24, 57, 186, 28, 516, 80, 554, 64, 400, 54, 243, 53, 118, 68, 31], ['flipped_test11', 142, 20, 108, 186, 47, 527, 30, 583, 87, 436, 131, 308, 156, 160, 148, 27], ['flipped_test11_5', 194, 35, 143, 198, 52, 528, 32, 588, 100, 446, 157, 326, 192, 172, 194, 47], ['flipped_test11_-5', 101, 14, 82, 187, 51, 531, 38, 587, 82, 439, 115, 310, 126, 154, 105, 25], ['flipped_test12', 40, 21, 37, 170, 32, 486, 11, 529, 41, 374, 58, 237, 64, 113, 45, 27], ['flipped_test12_5', 93, 22, 77, 173, 41, 489, 23, 526, 64, 373, 94, 237, 107, 113, 101, 27], ['flipped_test12_-5', 21, 20, 30, 168, 53, 484, 35, 528, 50, 367, 59, 230, 51, 106, 28, 29], ['test0_5', 28, 19, 36, 141, 47, 406, 69, 425, 50, 309, 33, 195, 24, 100, 26, 27], ['test0_-5', 90, 28, 74, 146, 47, 419, 56, 432, 61, 314, 65, 201, 73, 107, 88, 31], ['test1_5', 33, 23, 65, 149, 128, 432, 112, 447, 67, 329, 40, 240, 18, 119, 29, 28], ['test1_-5', 59, 27, 69, 157, 81, 441, 63, 462, 41, 335, 25, 211, 30, 116, 55, 33], ['test2_5', 63, 27, 57, 171, 48, 488, 11, 516, 42, 377, 63, 253, 74, 133, 66, 35], ['test2_-5_cut', 165, 26, 133, 168, 71, 474, 30, 497, 82, 368, 125, 251, 157, 131, 166, 32], ['test3_5', 32, 24, 30, 172, 36, 516, 65, 528, 80, 381, 88, 262, 76, 127, 41, 29], ['test3_-5', 109, 20, 82, 172, 27, 508, 55, 526, 91, 385, 121, 270, 135, 132, 115, 30], ['test4_5_cut', 45, 24, 97, 275, 187, 821, 226, 855, 135, 621, 69, 418, 30, 206, 41, 37], ['test4_-5_cut', 84, 20, 87, 273, 86, 830, 113, 866, 66, 626, 36, 416, 34, 199, 79, 28], ['test5_5', 28, 28, 47, 188, 77, 526, 89, 552, 52, 392, 29, 258, 16, 129, 25, 33], ['test5_-5', 80, 33, 70, 192, 43, 538, 51, 557, 43, 396, 41, 257, 49, 138, 77, 40], ['test6_5', 33, 22, 48, 137, 76, 384, 84, 401, 55, 297, 30, 201, 17, 109, 30, 27], ['test6_-5', 65, 26, 60, 142, 44, 389, 51, 410, 40, 304, 31, 199, 35, 107, 60, 31], ['test7_5', 22, 21, 59, 170, 138, 503, 138, 527, 86, 398, 46, 273, 16, 144, 14, 26], ['test7_-5', 40, 24, 55, 182, 72, 524, 70, 546, 44, 407, 22, 275, 14, 147, 34, 31], ['test8_5', 19, 18, 36, 128, 76, 370, 96, 395, 61, 280, 31, 184, 13, 93, 15, 23], ['test8_-5', 42, 23, 41, 137, 36, 382, 53, 410, 35, 292, 25, 191, 25, 97, 37, 28], ['test9_5', 29, 26, 32, 185, 42, 541, 33, 581, 51, 415, 58, 262, 56, 125, 34, 29], ['test9_-5', 100, 21, 76, 180, 28, 531, 5, 570, 52, 405, 88, 259, 111, 125, 106, 31], ['test10_5', 5, 14, 35, 177, 95, 501, 45, 545, 45, 389, 45, 235, 32, 112, 12, 20], ['test10_-5', 74, 21, 71, 189, 75, 521, 19, 553, 49, 398, 71, 247, 84, 123, 77, 29], ['test11_5', 31, 37, 80, 199, 173, 533, 194, 586, 121, 444, 71, 322, 32, 172, 30, 44], ['test11_-5', 55, 27, 76, 195, 106, 542, 118, 599, 76, 442, 46, 313, 29, 162, 53, 32], ['test12_5', 32, 22, 47, 169, 81, 490, 105, 527, 59, 372, 28, 236, 15, 111, 26, 26], ['test12_-5', 86, 26, 75, 176, 51, 489, 70, 535, 53, 373, 45, 235, 54, 113, 81, 28]]

print(len(list_ans))

true_list = []

num_data = len(list_ans)


for i in range(num_data):
    num_a = list_ans[i][1] - list_ans[i][5]
    num_b = list_ans[i][2] - list_ans[i][6]
    num_c = num_a ** 2 + num_b ** 2
    num_d = float(np.sqrt(num_c))
    true_list.append(num_d)
#     f1.write(str(num_d))
#     f1.write(",")
# f1.write("\n")

print("それぞれのマストの長さ：",true_list)
print(len(true_list))

base = 500.0
# f1.write("base = ")
# f1.write(str(base))
# f1.write("\n")

scale_list = []

for i in range(len(true_list)):
    num_s = base / true_list[i]
    # print(num_s)
    # f1.write(str(num_s))
    # f1.write(",")
    scale_list.append(num_s)
print("比率:", scale_list)
# f1.write("\n")


dis_list = []
dis = []
# dis_all = []

list_score = [0,0,0,0,0,0,0,0]

for i in range(num_data):
    for j in range(num_data):
        if list_ans[i][0] == list_param[j][0]:
            dis.append(list_ans[i][0])
            for k in range(num_point * 2):
                # if float(list_ans[i][k + 1]) > float(list_param[j][k + 1]):
                #     num = float(list_ans[i][k + 1]) - float(list_param[j][k + 1])
                # else:
                #     num = float(list_param[j][k + 1]) - float(list_ans[i][k + 1])
                num = float(list_param[j][k + 1]) - float(list_ans[i][k + 1])
                num = num * scale_list[i]
                dis.append(num)
    dis_list.append(dis)
    dis = []

print(dis_list)

# x,yに分ける

list_x = []
list_y = []

# キーポイントの番号
list_key = [ 1, 2, 3, 4, 5, 6, 7, 8]

txtname = 'result_dist_x.txt'
f3 = open(txtname, 'a')
txtname = 'result_dist_y.txt'
f4 = open(txtname, 'a')


for i in range(len(list_key)):
    txtname = 'result_dist_' + str(list_key[i]) + '_x.txt'
    f1 = open(txtname, 'a')
    txtname = 'result_dist_' + str(list_key[i]) + '_y.txt'
    f2 = open(txtname, 'a')

    num_key = int(list_key[i]) * 2 - 1

    for j in range(len(dis_list)):
        f1.write(str(dis_list[j][num_key]))
        f2.write(str(dis_list[j][num_key + 1]))
        f1.write('\n')
        f2.write('\n')
        f3.write(str(dis_list[j][num_key]))
        f4.write(str(dis_list[j][num_key + 1]))
        f3.write('\n')
        f4.write('\n')
    f1.close()
    f2.close()